// Code generated by ent, DO NOT EDIT.

package url

import (
	"gukppap-backend/internal/adapter/repository/mysql/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Url {
	return predicate.Url(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Url {
	return predicate.Url(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Url {
	return predicate.Url(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Url {
	return predicate.Url(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Url {
	return predicate.Url(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Url {
	return predicate.Url(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Url {
	return predicate.Url(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Url {
	return predicate.Url(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Url {
	return predicate.Url(sql.FieldLTE(FieldID, id))
}

// OriginURL applies equality check predicate on the "origin_url" field. It's identical to OriginURLEQ.
func OriginURL(v string) predicate.Url {
	return predicate.Url(sql.FieldEQ(FieldOriginURL, v))
}

// ShortcutURL applies equality check predicate on the "shortcut_url" field. It's identical to ShortcutURLEQ.
func ShortcutURL(v string) predicate.Url {
	return predicate.Url(sql.FieldEQ(FieldShortcutURL, v))
}

// OriginURLEQ applies the EQ predicate on the "origin_url" field.
func OriginURLEQ(v string) predicate.Url {
	return predicate.Url(sql.FieldEQ(FieldOriginURL, v))
}

// OriginURLNEQ applies the NEQ predicate on the "origin_url" field.
func OriginURLNEQ(v string) predicate.Url {
	return predicate.Url(sql.FieldNEQ(FieldOriginURL, v))
}

// OriginURLIn applies the In predicate on the "origin_url" field.
func OriginURLIn(vs ...string) predicate.Url {
	return predicate.Url(sql.FieldIn(FieldOriginURL, vs...))
}

// OriginURLNotIn applies the NotIn predicate on the "origin_url" field.
func OriginURLNotIn(vs ...string) predicate.Url {
	return predicate.Url(sql.FieldNotIn(FieldOriginURL, vs...))
}

// OriginURLGT applies the GT predicate on the "origin_url" field.
func OriginURLGT(v string) predicate.Url {
	return predicate.Url(sql.FieldGT(FieldOriginURL, v))
}

// OriginURLGTE applies the GTE predicate on the "origin_url" field.
func OriginURLGTE(v string) predicate.Url {
	return predicate.Url(sql.FieldGTE(FieldOriginURL, v))
}

// OriginURLLT applies the LT predicate on the "origin_url" field.
func OriginURLLT(v string) predicate.Url {
	return predicate.Url(sql.FieldLT(FieldOriginURL, v))
}

// OriginURLLTE applies the LTE predicate on the "origin_url" field.
func OriginURLLTE(v string) predicate.Url {
	return predicate.Url(sql.FieldLTE(FieldOriginURL, v))
}

// OriginURLContains applies the Contains predicate on the "origin_url" field.
func OriginURLContains(v string) predicate.Url {
	return predicate.Url(sql.FieldContains(FieldOriginURL, v))
}

// OriginURLHasPrefix applies the HasPrefix predicate on the "origin_url" field.
func OriginURLHasPrefix(v string) predicate.Url {
	return predicate.Url(sql.FieldHasPrefix(FieldOriginURL, v))
}

// OriginURLHasSuffix applies the HasSuffix predicate on the "origin_url" field.
func OriginURLHasSuffix(v string) predicate.Url {
	return predicate.Url(sql.FieldHasSuffix(FieldOriginURL, v))
}

// OriginURLEqualFold applies the EqualFold predicate on the "origin_url" field.
func OriginURLEqualFold(v string) predicate.Url {
	return predicate.Url(sql.FieldEqualFold(FieldOriginURL, v))
}

// OriginURLContainsFold applies the ContainsFold predicate on the "origin_url" field.
func OriginURLContainsFold(v string) predicate.Url {
	return predicate.Url(sql.FieldContainsFold(FieldOriginURL, v))
}

// ShortcutURLEQ applies the EQ predicate on the "shortcut_url" field.
func ShortcutURLEQ(v string) predicate.Url {
	return predicate.Url(sql.FieldEQ(FieldShortcutURL, v))
}

// ShortcutURLNEQ applies the NEQ predicate on the "shortcut_url" field.
func ShortcutURLNEQ(v string) predicate.Url {
	return predicate.Url(sql.FieldNEQ(FieldShortcutURL, v))
}

// ShortcutURLIn applies the In predicate on the "shortcut_url" field.
func ShortcutURLIn(vs ...string) predicate.Url {
	return predicate.Url(sql.FieldIn(FieldShortcutURL, vs...))
}

// ShortcutURLNotIn applies the NotIn predicate on the "shortcut_url" field.
func ShortcutURLNotIn(vs ...string) predicate.Url {
	return predicate.Url(sql.FieldNotIn(FieldShortcutURL, vs...))
}

// ShortcutURLGT applies the GT predicate on the "shortcut_url" field.
func ShortcutURLGT(v string) predicate.Url {
	return predicate.Url(sql.FieldGT(FieldShortcutURL, v))
}

// ShortcutURLGTE applies the GTE predicate on the "shortcut_url" field.
func ShortcutURLGTE(v string) predicate.Url {
	return predicate.Url(sql.FieldGTE(FieldShortcutURL, v))
}

// ShortcutURLLT applies the LT predicate on the "shortcut_url" field.
func ShortcutURLLT(v string) predicate.Url {
	return predicate.Url(sql.FieldLT(FieldShortcutURL, v))
}

// ShortcutURLLTE applies the LTE predicate on the "shortcut_url" field.
func ShortcutURLLTE(v string) predicate.Url {
	return predicate.Url(sql.FieldLTE(FieldShortcutURL, v))
}

// ShortcutURLContains applies the Contains predicate on the "shortcut_url" field.
func ShortcutURLContains(v string) predicate.Url {
	return predicate.Url(sql.FieldContains(FieldShortcutURL, v))
}

// ShortcutURLHasPrefix applies the HasPrefix predicate on the "shortcut_url" field.
func ShortcutURLHasPrefix(v string) predicate.Url {
	return predicate.Url(sql.FieldHasPrefix(FieldShortcutURL, v))
}

// ShortcutURLHasSuffix applies the HasSuffix predicate on the "shortcut_url" field.
func ShortcutURLHasSuffix(v string) predicate.Url {
	return predicate.Url(sql.FieldHasSuffix(FieldShortcutURL, v))
}

// ShortcutURLEqualFold applies the EqualFold predicate on the "shortcut_url" field.
func ShortcutURLEqualFold(v string) predicate.Url {
	return predicate.Url(sql.FieldEqualFold(FieldShortcutURL, v))
}

// ShortcutURLContainsFold applies the ContainsFold predicate on the "shortcut_url" field.
func ShortcutURLContainsFold(v string) predicate.Url {
	return predicate.Url(sql.FieldContainsFold(FieldShortcutURL, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Url) predicate.Url {
	return predicate.Url(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Url) predicate.Url {
	return predicate.Url(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Url) predicate.Url {
	return predicate.Url(sql.NotPredicates(p))
}
