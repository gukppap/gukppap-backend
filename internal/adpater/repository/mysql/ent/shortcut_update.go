// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guckppap/gukppap-backend/internal/adpater/repository/mysql/ent/predicate"
	"github.com/guckppap/gukppap-backend/internal/adpater/repository/mysql/ent/shortcut"
)

// ShortcutUpdate is the builder for updating Shortcut entities.
type ShortcutUpdate struct {
	config
	hooks    []Hook
	mutation *ShortcutMutation
}

// Where appends a list predicates to the ShortcutUpdate builder.
func (su *ShortcutUpdate) Where(ps ...predicate.Shortcut) *ShortcutUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetURL sets the "url" field.
func (su *ShortcutUpdate) SetURL(s string) *ShortcutUpdate {
	su.mutation.SetURL(s)
	return su
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (su *ShortcutUpdate) SetNillableURL(s *string) *ShortcutUpdate {
	if s != nil {
		su.SetURL(*s)
	}
	return su
}

// SetShortcut sets the "shortcut" field.
func (su *ShortcutUpdate) SetShortcut(s string) *ShortcutUpdate {
	su.mutation.SetShortcut(s)
	return su
}

// SetNillableShortcut sets the "shortcut" field if the given value is not nil.
func (su *ShortcutUpdate) SetNillableShortcut(s *string) *ShortcutUpdate {
	if s != nil {
		su.SetShortcut(*s)
	}
	return su
}

// SetExp sets the "exp" field.
func (su *ShortcutUpdate) SetExp(t time.Time) *ShortcutUpdate {
	su.mutation.SetExp(t)
	return su
}

// SetNillableExp sets the "exp" field if the given value is not nil.
func (su *ShortcutUpdate) SetNillableExp(t *time.Time) *ShortcutUpdate {
	if t != nil {
		su.SetExp(*t)
	}
	return su
}

// Mutation returns the ShortcutMutation object of the builder.
func (su *ShortcutUpdate) Mutation() *ShortcutMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShortcutUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShortcutUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShortcutUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShortcutUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ShortcutUpdate) check() error {
	if v, ok := su.mutation.URL(); ok {
		if err := shortcut.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Shortcut.url": %w`, err)}
		}
	}
	if v, ok := su.mutation.Shortcut(); ok {
		if err := shortcut.ShortcutValidator(v); err != nil {
			return &ValidationError{Name: "shortcut", err: fmt.Errorf(`ent: validator failed for field "Shortcut.shortcut": %w`, err)}
		}
	}
	return nil
}

func (su *ShortcutUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shortcut.Table, shortcut.Columns, sqlgraph.NewFieldSpec(shortcut.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.URL(); ok {
		_spec.SetField(shortcut.FieldURL, field.TypeString, value)
	}
	if value, ok := su.mutation.Shortcut(); ok {
		_spec.SetField(shortcut.FieldShortcut, field.TypeString, value)
	}
	if value, ok := su.mutation.Exp(); ok {
		_spec.SetField(shortcut.FieldExp, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shortcut.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ShortcutUpdateOne is the builder for updating a single Shortcut entity.
type ShortcutUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShortcutMutation
}

// SetURL sets the "url" field.
func (suo *ShortcutUpdateOne) SetURL(s string) *ShortcutUpdateOne {
	suo.mutation.SetURL(s)
	return suo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (suo *ShortcutUpdateOne) SetNillableURL(s *string) *ShortcutUpdateOne {
	if s != nil {
		suo.SetURL(*s)
	}
	return suo
}

// SetShortcut sets the "shortcut" field.
func (suo *ShortcutUpdateOne) SetShortcut(s string) *ShortcutUpdateOne {
	suo.mutation.SetShortcut(s)
	return suo
}

// SetNillableShortcut sets the "shortcut" field if the given value is not nil.
func (suo *ShortcutUpdateOne) SetNillableShortcut(s *string) *ShortcutUpdateOne {
	if s != nil {
		suo.SetShortcut(*s)
	}
	return suo
}

// SetExp sets the "exp" field.
func (suo *ShortcutUpdateOne) SetExp(t time.Time) *ShortcutUpdateOne {
	suo.mutation.SetExp(t)
	return suo
}

// SetNillableExp sets the "exp" field if the given value is not nil.
func (suo *ShortcutUpdateOne) SetNillableExp(t *time.Time) *ShortcutUpdateOne {
	if t != nil {
		suo.SetExp(*t)
	}
	return suo
}

// Mutation returns the ShortcutMutation object of the builder.
func (suo *ShortcutUpdateOne) Mutation() *ShortcutMutation {
	return suo.mutation
}

// Where appends a list predicates to the ShortcutUpdate builder.
func (suo *ShortcutUpdateOne) Where(ps ...predicate.Shortcut) *ShortcutUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShortcutUpdateOne) Select(field string, fields ...string) *ShortcutUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Shortcut entity.
func (suo *ShortcutUpdateOne) Save(ctx context.Context) (*Shortcut, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShortcutUpdateOne) SaveX(ctx context.Context) *Shortcut {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShortcutUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShortcutUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ShortcutUpdateOne) check() error {
	if v, ok := suo.mutation.URL(); ok {
		if err := shortcut.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Shortcut.url": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Shortcut(); ok {
		if err := shortcut.ShortcutValidator(v); err != nil {
			return &ValidationError{Name: "shortcut", err: fmt.Errorf(`ent: validator failed for field "Shortcut.shortcut": %w`, err)}
		}
	}
	return nil
}

func (suo *ShortcutUpdateOne) sqlSave(ctx context.Context) (_node *Shortcut, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shortcut.Table, shortcut.Columns, sqlgraph.NewFieldSpec(shortcut.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Shortcut.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shortcut.FieldID)
		for _, f := range fields {
			if !shortcut.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shortcut.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.URL(); ok {
		_spec.SetField(shortcut.FieldURL, field.TypeString, value)
	}
	if value, ok := suo.mutation.Shortcut(); ok {
		_spec.SetField(shortcut.FieldShortcut, field.TypeString, value)
	}
	if value, ok := suo.mutation.Exp(); ok {
		_spec.SetField(shortcut.FieldExp, field.TypeTime, value)
	}
	_node = &Shortcut{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shortcut.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
