// Code generated by ent, DO NOT EDIT.

package shortcut

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/guckppap/gukppap-backend/internal/adpater/repository/mysql/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldLTE(FieldID, id))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldEQ(FieldURL, v))
}

// Shortcut applies equality check predicate on the "shortcut" field. It's identical to ShortcutEQ.
func Shortcut(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldEQ(FieldShortcut, v))
}

// Exp applies equality check predicate on the "exp" field. It's identical to ExpEQ.
func Exp(v time.Time) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldEQ(FieldExp, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldContainsFold(FieldURL, v))
}

// ShortcutEQ applies the EQ predicate on the "shortcut" field.
func ShortcutEQ(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldEQ(FieldShortcut, v))
}

// ShortcutNEQ applies the NEQ predicate on the "shortcut" field.
func ShortcutNEQ(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldNEQ(FieldShortcut, v))
}

// ShortcutIn applies the In predicate on the "shortcut" field.
func ShortcutIn(vs ...string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldIn(FieldShortcut, vs...))
}

// ShortcutNotIn applies the NotIn predicate on the "shortcut" field.
func ShortcutNotIn(vs ...string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldNotIn(FieldShortcut, vs...))
}

// ShortcutGT applies the GT predicate on the "shortcut" field.
func ShortcutGT(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldGT(FieldShortcut, v))
}

// ShortcutGTE applies the GTE predicate on the "shortcut" field.
func ShortcutGTE(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldGTE(FieldShortcut, v))
}

// ShortcutLT applies the LT predicate on the "shortcut" field.
func ShortcutLT(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldLT(FieldShortcut, v))
}

// ShortcutLTE applies the LTE predicate on the "shortcut" field.
func ShortcutLTE(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldLTE(FieldShortcut, v))
}

// ShortcutContains applies the Contains predicate on the "shortcut" field.
func ShortcutContains(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldContains(FieldShortcut, v))
}

// ShortcutHasPrefix applies the HasPrefix predicate on the "shortcut" field.
func ShortcutHasPrefix(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldHasPrefix(FieldShortcut, v))
}

// ShortcutHasSuffix applies the HasSuffix predicate on the "shortcut" field.
func ShortcutHasSuffix(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldHasSuffix(FieldShortcut, v))
}

// ShortcutEqualFold applies the EqualFold predicate on the "shortcut" field.
func ShortcutEqualFold(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldEqualFold(FieldShortcut, v))
}

// ShortcutContainsFold applies the ContainsFold predicate on the "shortcut" field.
func ShortcutContainsFold(v string) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldContainsFold(FieldShortcut, v))
}

// ExpEQ applies the EQ predicate on the "exp" field.
func ExpEQ(v time.Time) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldEQ(FieldExp, v))
}

// ExpNEQ applies the NEQ predicate on the "exp" field.
func ExpNEQ(v time.Time) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldNEQ(FieldExp, v))
}

// ExpIn applies the In predicate on the "exp" field.
func ExpIn(vs ...time.Time) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldIn(FieldExp, vs...))
}

// ExpNotIn applies the NotIn predicate on the "exp" field.
func ExpNotIn(vs ...time.Time) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldNotIn(FieldExp, vs...))
}

// ExpGT applies the GT predicate on the "exp" field.
func ExpGT(v time.Time) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldGT(FieldExp, v))
}

// ExpGTE applies the GTE predicate on the "exp" field.
func ExpGTE(v time.Time) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldGTE(FieldExp, v))
}

// ExpLT applies the LT predicate on the "exp" field.
func ExpLT(v time.Time) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldLT(FieldExp, v))
}

// ExpLTE applies the LTE predicate on the "exp" field.
func ExpLTE(v time.Time) predicate.Shortcut {
	return predicate.Shortcut(sql.FieldLTE(FieldExp, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Shortcut) predicate.Shortcut {
	return predicate.Shortcut(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Shortcut) predicate.Shortcut {
	return predicate.Shortcut(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Shortcut) predicate.Shortcut {
	return predicate.Shortcut(sql.NotPredicates(p))
}
