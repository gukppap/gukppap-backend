// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/guckppap/gukppap-backend/internal/adpater/repository/mysql/ent/shortcut"
)

// Shortcut is the model entity for the Shortcut schema.
type Shortcut struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Shortcut holds the value of the "shortcut" field.
	Shortcut string `json:"shortcut,omitempty"`
	// Exp holds the value of the "exp" field.
	Exp          time.Time `json:"exp,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Shortcut) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shortcut.FieldID:
			values[i] = new(sql.NullInt64)
		case shortcut.FieldURL, shortcut.FieldShortcut:
			values[i] = new(sql.NullString)
		case shortcut.FieldExp:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Shortcut fields.
func (s *Shortcut) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shortcut.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case shortcut.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				s.URL = value.String
			}
		case shortcut.FieldShortcut:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shortcut", values[i])
			} else if value.Valid {
				s.Shortcut = value.String
			}
		case shortcut.FieldExp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field exp", values[i])
			} else if value.Valid {
				s.Exp = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Shortcut.
// This includes values selected through modifiers, order, etc.
func (s *Shortcut) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Shortcut.
// Note that you need to call Shortcut.Unwrap() before calling this method if this Shortcut
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Shortcut) Update() *ShortcutUpdateOne {
	return NewShortcutClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Shortcut entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Shortcut) Unwrap() *Shortcut {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Shortcut is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Shortcut) String() string {
	var builder strings.Builder
	builder.WriteString("Shortcut(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("url=")
	builder.WriteString(s.URL)
	builder.WriteString(", ")
	builder.WriteString("shortcut=")
	builder.WriteString(s.Shortcut)
	builder.WriteString(", ")
	builder.WriteString("exp=")
	builder.WriteString(s.Exp.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Shortcuts is a parsable slice of Shortcut.
type Shortcuts []*Shortcut
